generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Store {
  id          String         @id @default(uuid())
  name        String
  userId      String
  billboards  Billboard[]    @relation("StoreToBillboard")
  categories  Category[]     @relation("StoreToCategory")
  sizes       Size[]         @relation("StoreToSize")
  colors      Color[]        @relation("StoreToColor")
  products    Product[]      @relation("StoreToProduct")
  orders      Order[]        @relation("StoreToOrder")
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model Billboard {
  id          String         @id  @default(uuid())
  label       String      
  imageUrl    String
  storeId     String
  store       Store          @relation("StoreToBillboard", fields: [storeId], references: [id])
  categories  Category[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model Category {
  id            String        @id @default(uuid())
  name          String    
  storeId       String    
  store         Store         @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId   String    
  billboard     Billboard     @relation(fields: [billboardId], references: [id])
  products      Product[]     @relation("CategoryToProduct")
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Size {
  id            String        @id @default(uuid())
  storeId       String
  store         Store         @relation("StoreToSize", fields: [storeId], references: [id])
  name          String
  value         String
  products      Product[]
  createdAt     DateTime      @default(now())
  updateAt      DateTime      @updatedAt
}

model Color {
  id            String        @id @default(uuid())
  storeId       String
  store         Store         @relation("StoreToColor", fields: [storeId], references: [id])
  name          String
  value         String
  products      Product[]
  createdAt     DateTime      @default(now())
  updateAt      DateTime      @updatedAt
}

model Product {
  id            String        @id  @default(uuid())
  name          String
  price         Decimal
  isFeatured    Boolean       @default(false)
  isArchived    Boolean       @default(false)
  images        Image[]
  storeId       String
  store         Store         @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId    String
  category      Category      @relation("CategoryToProduct", fields: [categoryId], references: [id])
  sizeId        String
  size          Size          @relation(fields: [sizeId], references: [id])
  colorId       String
  color         Color         @relation(fields: [colorId], references: [id])
  orderItems    OrderItem[]
  createdAt     DateTime      @default(now())
  updateAt      DateTime      @updatedAt
}

model Image {
  id              String      @id @default(uuid())
  url             String
  productId       String
  product         Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt       DateTime    @default(now())
  updateAt        DateTime    @updatedAt
}

model Order {
  id  String  @id @default(uuid())
  phone String  @default("")
  address String  @default("")
  isPaid  Boolean @default(false)
  orderItems  OrderItem[]
  storeId String
  store Store @relation("StoreToOrder", fields: [storeId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model OrderItem {
  id  String  @id @default(uuid())
  orderId String
  order Order @relation(fields: [orderId], references: [id])
  productId String
  product Product @relation(fields: [productId], references: [id])
}